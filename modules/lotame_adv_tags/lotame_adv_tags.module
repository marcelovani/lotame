<?php
/**
 * @file
 * Code for the module.
 */

/**
 * Implements hook_preprocess_html().
 */
function lotame_adv_tags_preprocess_html(&$vars) {
  $client_id = lotame_get_client_id();

  if (!empty($client_id) && lotame_visibility_pages()) {
    // Load default patterns. //@todo create UI with storage for this.
    $patterns = module_invoke_all('lotame_adv_tags_default_patterns');

    // Allow modules to alter the patterns and add some extra logic if needed.
    drupal_alter('lotame_adv_tags_default_patterns', $patterns);

    if (empty($patterns)) {
      return;
    }

    // Process patterns.
    $tags = _lotame_adv_tags_process_patterns($patterns);
    $tags = _lotame_adv_tags_render_tokens($tags);
    sort($tags);

    $options = array(
      'every_page' => TRUE,
      'scope' => 'footer',
      'type' => 'inline',
      'weight' => 10,
    );

    drupal_add_js(implode("\n", $tags), $options);
  }
}

/**
 * Implements hook_module_implements_alter().
 */
function lotame_adv_tags_module_implements_alter(&$implementations, $hook) {
  // Make lotame_adv_tags run last.
  if ($hook == 'dfp_global_targeting_alter') {
    $group = $implementations['lotame_adv_tags'];
    unset($implementations['lotame_adv_tags']);
    $implementations['lotame_adv_tags'] = $group;
  }
}

/**
 * Renders patterns.
 *
 * @param $patterns The Lotame adv tags patterns.
 *
 * @return array Lotame adv tags.
 */
function _lotame_adv_tags_process_patterns($patterns) {
  $client_id = lotame_get_client_id();
  $tags = array();
  $multi_value_patterns = array();
  foreach ($patterns as $pattern) {
    // Check if there is any multi-value field.
    if ($multi_value_tokens = _lotame_adv_tags_pattern_has_multi_value_tokens($pattern)) {
      $keys = array_keys($multi_value_tokens);
      $token = reset($keys);
      foreach ($multi_value_tokens[$token] as $value) {
        $multi_value_patterns[] = str_replace($token, trim($value), $pattern);
      }
      // Multi-value fields will be processed after.
      continue;
    }

    $behaviour_type = 'ctax'; //@todo get this setting from the pattern config.
    $tag = "_cc" . $client_id . ".add('" . $behaviour_type . "', '" . $pattern . "');";

    array_push($tags, $tag);
  }

  // Process multi-value fields.
  if (!empty($multi_value_patterns)) {
    $multi_value_tags = _lotame_adv_tags_process_patterns($multi_value_patterns);
    $tags = array_merge($tags, $multi_value_tags);
  }

  return array_unique($tags);
}

/**
 * Render tokens and clean entries with invalid tokens.
 *
 * @param $tags Tags.
 *
 * @return array Tags.
 */
function _lotame_adv_tags_render_tokens($tags) {
  foreach ($tags as $key => &$tag) {
    // Token replace for global tokens.
    $tag = token_replace($tag, lotame_get_token_data(), array('clear' => FALSE));

    // If any token did not get rendered, remove the tag.
    if (_lotame_adv_tags_get_tokens($tag)) {
      // Remove this tag.
      unset($tags[$key]);
    }
  }

  return $tags;
}

/**
 * Helper to get tokens that have multiple values.
 *
 * @param $str String
 *
 * @return array keyed array with tokens and the respective values.
 */
function _lotame_adv_tags_pattern_has_multi_value_tokens($str) {
  $multi_value_tokens = array();
  $tokens = _lotame_adv_tags_get_multi_value_tokens($str);

  // Render tokens individually to find if any token has multiple values.
  foreach ($tokens as $token) {
    $value = token_replace($token, lotame_get_token_data());
    $values = explode(',', $value);

    if (is_array($values) && sizeof($values) > 1) {
      $multi_value_tokens[$token] = $values;
    }
  }

  if (!empty($multi_value_tokens)) {
    return $multi_value_tokens;
  }
}

/**
 * Helper to extract tokens from a string.
 *
 * @param $str The string.
 *
 * @return mixed The tokens, if found or NULL.
 */
function _lotame_adv_tags_get_tokens($str) {
  preg_match_all('/\[(.*?)\]/', $str, $matches);

  if (isset($matches[0]) && !empty($matches[0])) {
    return $matches;
  }
}

/**
 * Helper to find tokens that multiple values.
 *
 * @param $pattern
 *
 * @return array List of tokens.
 */
function _lotame_adv_tags_get_multi_value_tokens($str) {
  $tokens = array();

  if ($matches = _lotame_adv_tags_get_tokens($str)) {
    foreach ($matches[0] as $token) {
      $tokens[] = $token;
    }
  }
  $tokens = array_unique($tokens);

  return $tokens;
}
